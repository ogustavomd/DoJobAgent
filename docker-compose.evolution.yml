# Docker Compose para Evolution API v2
# Configure este arquivo com seus dados e execute: docker-compose -f docker-compose.evolution.yml up -d

version: '3.9'

services:
  # PostgreSQL Database (se não tiver)
  postgres:
    image: postgres:15
    container_name: evolution_postgres
    restart: always
    environment:
      POSTGRES_DB: evolution
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: SuaSenhaSegura123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - evolution_network

  # Redis Cache (se não tiver)
  redis:
    image: redis:7-alpine
    container_name: evolution_redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - evolution_network

  # Evolution API v2
  evolution-api:
    image: atendai/evolution-api:v2.1.1
    container_name: evolution_api
    restart: always
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - SERVER_URL=http://localhost:8080
      
      # Authentication
      - AUTHENTICATION_API_KEY=mude-me-para-uma-chave-segura
      
      # Database Configuration
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://postgres:SuaSenhaSegura123@postgres:5432/evolution
      - DATABASE_SAVE_DATA_INSTANCE=true
      - DATABASE_SAVE_DATA_NEW_MESSAGE=true
      - DATABASE_SAVE_MESSAGE_UPDATE=true
      - DATABASE_SAVE_DATA_CONTACTS=true
      - DATABASE_SAVE_DATA_CHATS=true
      - DATABASE_SAVE_DATA_LABELS=true
      - DATABASE_SAVE_DATA_HISTORIC=true
      - DATABASE_CONNECTION_CLIENT_NAME=evolution_anna
      
      # Cache Redis
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379/1
      - CACHE_REDIS_PREFIX_KEY=evolution_anna
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CACHE_LOCAL_ENABLED=false
      
      # Webhook Configuration (opcional - configure depois na interface)
      - WEBHOOK_GLOBAL_ENABLED=false
      - WEBHOOK_GLOBAL_URL=
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
      
      # Principais eventos de webhook
      - WEBHOOK_EVENTS_APPLICATION_STARTUP=false
      - WEBHOOK_EVENTS_QRCODE_UPDATED=true
      - WEBHOOK_EVENTS_MESSAGES_UPSERT=true
      - WEBHOOK_EVENTS_MESSAGES_UPDATE=true
      - WEBHOOK_EVENTS_SEND_MESSAGE=true
      - WEBHOOK_EVENTS_CONNECTION_UPDATE=true
      
      # Session Configuration
      - CONFIG_SESSION_PHONE_CLIENT=Anna Bot
      - CONFIG_SESSION_PHONE_NAME=Chrome
      
      # QR Code Configuration
      - QRCODE_LIMIT=30
      - QRCODE_COLOR=#25D366
      
      # Logs
      - LOG_LEVEL=ERROR,WARN,DEBUG,INFO,LOG,VERBOSE,DARK,WEBHOOKS
      - LOG_COLOR=true
      - LOG_BAILEYS=error
      
      # Instance Management
      - DEL_INSTANCE=false
      
      # CORS
      - CORS_ORIGIN=*
      - CORS_METHODS=GET,POST,PUT,DELETE
      - CORS_CREDENTIALS=true
      
    volumes:
      - evolution_instances:/evolution/instances
    networks:
      - evolution_network
    depends_on:
      - postgres
      - redis

volumes:
  postgres_data:
    driver: local
  evolution_instances:
    driver: local

networks:
  evolution_network:
    driver: bridge

# INSTRUÇÕES DE USO:
# 
# 1. Substitua "SuaSenhaSegura123" por uma senha forte
# 2. Substitua "mude-me-para-uma-chave-segura" por uma API key segura
# 3. Execute: docker-compose -f docker-compose.evolution.yml up -d
# 4. Acesse http://localhost:8080 para verificar se está funcionando
# 5. Use a API key configurada para autenticar nas requisições
# 6. Configure o webhook na interface Anna para receber mensagens automaticamente
#
# Para parar: docker-compose -f docker-compose.evolution.yml down
# Para ver logs: docker-compose -f docker-compose.evolution.yml logs -f evolution-api